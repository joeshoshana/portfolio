//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shkila.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WanagerDBEntities : DbContext
    {
        public WanagerDBEntities()
            : base("name=WanagerDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Companies> Companies { get; set; }
        public virtual DbSet<Scales> Scales { get; set; }
        public virtual DbSet<ScalesTypes> ScalesTypes { get; set; }
        public virtual DbSet<CompaniesTables> CompaniesTables { get; set; }
        public virtual DbSet<Tables> Tables { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Items> Items { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<Suppliers> Suppliers { get; set; }
        public virtual DbSet<CompaniesForms> CompaniesForms { get; set; }
        public virtual DbSet<Forms> Forms { get; set; }
        public virtual DbSet<Vehicles> Vehicles { get; set; }
        public virtual DbSet<Sites> Sites { get; set; }
        public virtual DbSet<SuppliersContacts> SuppliersContacts { get; set; }
        public virtual DbSet<CustomersContacts> CustomersContacts { get; set; }
        public virtual DbSet<Silos> Silos { get; set; }
        public virtual DbSet<Transports> Transports { get; set; }
        public virtual DbSet<Dictionary> Dictionary { get; set; }
        public virtual DbSet<GoodsWeighing> GoodsWeighing { get; set; }
        public virtual DbSet<GoodsWeighingLines> GoodsWeighingLines { get; set; }
        public virtual DbSet<Units> Units { get; set; }
        public virtual DbSet<CompaniesFormsFields> CompaniesFormsFields { get; set; }
        public virtual DbSet<FormsFields> FormsFields { get; set; }
        public virtual DbSet<FormsInnerPermissions> FormsInnerPermissions { get; set; }
        public virtual DbSet<Permissions> Permissions { get; set; }
        public virtual DbSet<PermissionsFormsInnerPermissions> PermissionsFormsInnerPermissions { get; set; }
        public virtual DbSet<PermissionsTablesInnerPermissions> PermissionsTablesInnerPermissions { get; set; }
        public virtual DbSet<TablesInnerPermissions> TablesInnerPermissions { get; set; }
        public virtual DbSet<SilosLog> SilosLog { get; set; }
        public virtual DbSet<CompaniesSettings> CompaniesSettings { get; set; }
        public virtual DbSet<Settings> Settings { get; set; }
        public virtual DbSet<PermissionsSettingsInnerPermissions> PermissionsSettingsInnerPermissions { get; set; }
        public virtual DbSet<SettingsInnerPermissions> SettingsInnerPermissions { get; set; }
        public virtual DbSet<CompaniesSystemSettings> CompaniesSystemSettings { get; set; }
        public virtual DbSet<Drivers> Drivers { get; set; }
        public virtual DbSet<Connections> Connections { get; set; }
        public virtual DbSet<VehiclesWeighing> VehiclesWeighing { get; set; }
        public virtual DbSet<InnerPermissions> InnerPermissions { get; set; }
        public virtual DbSet<PermissionsInnerPermissions> PermissionsInnerPermissions { get; set; }
        public virtual DbSet<WeighingModes> WeighingModes { get; set; }
        public virtual DbSet<SendingMethods> SendingMethods { get; set; }
        public virtual DbSet<SystemSetting> SystemSettings { get; set; }
    
        public virtual ObjectResult<sp_GetCompanies_Result> sp_GetCompanies(Nullable<long> allowedRows, Nullable<long> gUID, string nAME, Nullable<long> ownerID, string iD, string address, Nullable<bool> isOwner, Nullable<bool> active)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(long));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var isOwnerParameter = isOwner.HasValue ?
                new ObjectParameter("IsOwner", isOwner) :
                new ObjectParameter("IsOwner", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompanies_Result>("sp_GetCompanies", allowedRowsParameter, gUIDParameter, nAMEParameter, ownerIDParameter, iDParameter, addressParameter, isOwnerParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_GetScales_Result> sp_GetScales(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, Nullable<long> ownerID, string nAME, string mAC, Nullable<long> scalesTypeID, Nullable<bool> status, Nullable<bool> active)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var mACParameter = mAC != null ?
                new ObjectParameter("MAC", mAC) :
                new ObjectParameter("MAC", typeof(string));
    
            var scalesTypeIDParameter = scalesTypeID.HasValue ?
                new ObjectParameter("ScalesTypeID", scalesTypeID) :
                new ObjectParameter("ScalesTypeID", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetScales_Result>("sp_GetScales", allowedRowsParameter, gUIDParameter, companyIDParameter, ownerIDParameter, nAMEParameter, mACParameter, scalesTypeIDParameter, statusParameter, activeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveCompany(Nullable<long> gUID, string name, string address, string iD, Nullable<bool> active, Nullable<bool> isOwner, string logoPath, string certificateTitle, Nullable<int> languageID, Nullable<bool> isSuper, Nullable<long> ownerID, string dataFolder, string imagesFolder, string systemLogoPath, Nullable<long> companiesLimit, Nullable<int> hour, Nullable<int> minute)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var isOwnerParameter = isOwner.HasValue ?
                new ObjectParameter("IsOwner", isOwner) :
                new ObjectParameter("IsOwner", typeof(bool));
    
            var logoPathParameter = logoPath != null ?
                new ObjectParameter("LogoPath", logoPath) :
                new ObjectParameter("LogoPath", typeof(string));
    
            var certificateTitleParameter = certificateTitle != null ?
                new ObjectParameter("CertificateTitle", certificateTitle) :
                new ObjectParameter("CertificateTitle", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            var isSuperParameter = isSuper.HasValue ?
                new ObjectParameter("IsSuper", isSuper) :
                new ObjectParameter("IsSuper", typeof(bool));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(long));
    
            var dataFolderParameter = dataFolder != null ?
                new ObjectParameter("DataFolder", dataFolder) :
                new ObjectParameter("DataFolder", typeof(string));
    
            var imagesFolderParameter = imagesFolder != null ?
                new ObjectParameter("ImagesFolder", imagesFolder) :
                new ObjectParameter("ImagesFolder", typeof(string));
    
            var systemLogoPathParameter = systemLogoPath != null ?
                new ObjectParameter("SystemLogoPath", systemLogoPath) :
                new ObjectParameter("SystemLogoPath", typeof(string));
    
            var companiesLimitParameter = companiesLimit.HasValue ?
                new ObjectParameter("CompaniesLimit", companiesLimit) :
                new ObjectParameter("CompaniesLimit", typeof(long));
    
            var hourParameter = hour.HasValue ?
                new ObjectParameter("Hour", hour) :
                new ObjectParameter("Hour", typeof(int));
    
            var minuteParameter = minute.HasValue ?
                new ObjectParameter("Minute", minute) :
                new ObjectParameter("Minute", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveCompany", gUIDParameter, nameParameter, addressParameter, iDParameter, activeParameter, isOwnerParameter, logoPathParameter, certificateTitleParameter, languageIDParameter, isSuperParameter, ownerIDParameter, dataFolderParameter, imagesFolderParameter, systemLogoPathParameter, companiesLimitParameter, hourParameter, minuteParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveScale(Nullable<long> gUID, string mAC, Nullable<long> companyID, Nullable<bool> status, string weight, Nullable<System.DateTime> weightDate, Nullable<bool> active, string name, Nullable<long> scalesTypeID, Nullable<bool> isDemo, Nullable<long> unitID, Nullable<long> ownerID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var mACParameter = mAC != null ?
                new ObjectParameter("MAC", mAC) :
                new ObjectParameter("MAC", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var weightParameter = weight != null ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(string));
    
            var weightDateParameter = weightDate.HasValue ?
                new ObjectParameter("WeightDate", weightDate) :
                new ObjectParameter("WeightDate", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var scalesTypeIDParameter = scalesTypeID.HasValue ?
                new ObjectParameter("ScalesTypeID", scalesTypeID) :
                new ObjectParameter("ScalesTypeID", typeof(long));
    
            var isDemoParameter = isDemo.HasValue ?
                new ObjectParameter("IsDemo", isDemo) :
                new ObjectParameter("IsDemo", typeof(bool));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(long));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveScale", gUIDParameter, mACParameter, companyIDParameter, statusParameter, weightParameter, weightDateParameter, activeParameter, nameParameter, scalesTypeIDParameter, isDemoParameter, unitIDParameter, ownerIDParameter);
        }
    
        public virtual ObjectResult<sp_GetScalesTypes_Result> sp_GetScalesTypes(Nullable<long> gUID, string nAME, Nullable<bool> active)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetScalesTypes_Result>("sp_GetScalesTypes", gUIDParameter, nAMEParameter, activeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveScalesType(Nullable<long> gUID, string name, Nullable<bool> active)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveScalesType", gUIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveCompanyTable(Nullable<long> gUID, Nullable<long> companyID, Nullable<long> tableID, Nullable<long> allowedRows)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var tableIDParameter = tableID.HasValue ?
                new ObjectParameter("TableID", tableID) :
                new ObjectParameter("TableID", typeof(long));
    
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveCompanyTable", gUIDParameter, companyIDParameter, tableIDParameter, allowedRowsParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveTable(Nullable<long> gUID, string name, string link, Nullable<bool> active)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveTable", gUIDParameter, nameParameter, linkParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_GetTables_Result> sp_GetTables(Nullable<long> gUID, string link, string nAME)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTables_Result>("sp_GetTables", gUIDParameter, linkParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<sp_GetUsers_Result> sp_GetUsers(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, Nullable<long> defaultFormID, Nullable<long> defaultScaleID, string firstName, string lastName, string username, string password, string iD, string email, Nullable<bool> active)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var defaultFormIDParameter = defaultFormID.HasValue ?
                new ObjectParameter("DefaultFormID", defaultFormID) :
                new ObjectParameter("DefaultFormID", typeof(long));
    
            var defaultScaleIDParameter = defaultScaleID.HasValue ?
                new ObjectParameter("DefaultScaleID", defaultScaleID) :
                new ObjectParameter("DefaultScaleID", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUsers_Result>("sp_GetUsers", allowedRowsParameter, gUIDParameter, companyIDParameter, defaultFormIDParameter, defaultScaleIDParameter, firstNameParameter, lastNameParameter, usernameParameter, passwordParameter, iDParameter, emailParameter, activeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveUser(Nullable<long> gUID, string firstName, string lastName, string iD, Nullable<System.DateTime> birthDate, string username, string password, Nullable<long> companyID, Nullable<bool> active, string email, Nullable<long> defaultScaleID, Nullable<long> defaultFormID, Nullable<int> languageID, Nullable<long> permissionID, Nullable<long> driverID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var defaultScaleIDParameter = defaultScaleID.HasValue ?
                new ObjectParameter("DefaultScaleID", defaultScaleID) :
                new ObjectParameter("DefaultScaleID", typeof(long));
    
            var defaultFormIDParameter = defaultFormID.HasValue ?
                new ObjectParameter("DefaultFormID", defaultFormID) :
                new ObjectParameter("DefaultFormID", typeof(long));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveUser", gUIDParameter, firstNameParameter, lastNameParameter, iDParameter, birthDateParameter, usernameParameter, passwordParameter, companyIDParameter, activeParameter, emailParameter, defaultScaleIDParameter, defaultFormIDParameter, languageIDParameter, permissionIDParameter, driverIDParameter);
        }
    
        public virtual ObjectResult<sp_GetItems_Result> sp_GetItems(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, string nAME, string sN, Nullable<bool> active)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var sNParameter = sN != null ?
                new ObjectParameter("SN", sN) :
                new ObjectParameter("SN", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetItems_Result>("sp_GetItems", allowedRowsParameter, gUIDParameter, companyIDParameter, nAMEParameter, sNParameter, activeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveItem(Nullable<long> gUID, string name, string sN, Nullable<bool> active, Nullable<long> companyID, Nullable<bool> isAddInForm)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sNParameter = sN != null ?
                new ObjectParameter("SN", sN) :
                new ObjectParameter("SN", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var isAddInFormParameter = isAddInForm.HasValue ?
                new ObjectParameter("IsAddInForm", isAddInForm) :
                new ObjectParameter("IsAddInForm", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveItem", gUIDParameter, nameParameter, sNParameter, activeParameter, companyIDParameter, isAddInFormParameter);
        }
    
        public virtual ObjectResult<sp_GetCustomers_Result> sp_GetCustomers(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, string nAME, string iD, string address, Nullable<bool> active, string code, Nullable<long> maxObligo, Nullable<bool> isOneTimeObligo, Nullable<long> renewDay, Nullable<System.DateTime> obligoStartDate, Nullable<bool> isVIP)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var maxObligoParameter = maxObligo.HasValue ?
                new ObjectParameter("MaxObligo", maxObligo) :
                new ObjectParameter("MaxObligo", typeof(long));
    
            var isOneTimeObligoParameter = isOneTimeObligo.HasValue ?
                new ObjectParameter("IsOneTimeObligo", isOneTimeObligo) :
                new ObjectParameter("IsOneTimeObligo", typeof(bool));
    
            var renewDayParameter = renewDay.HasValue ?
                new ObjectParameter("RenewDay", renewDay) :
                new ObjectParameter("RenewDay", typeof(long));
    
            var obligoStartDateParameter = obligoStartDate.HasValue ?
                new ObjectParameter("ObligoStartDate", obligoStartDate) :
                new ObjectParameter("ObligoStartDate", typeof(System.DateTime));
    
            var isVIPParameter = isVIP.HasValue ?
                new ObjectParameter("IsVIP", isVIP) :
                new ObjectParameter("IsVIP", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCustomers_Result>("sp_GetCustomers", allowedRowsParameter, gUIDParameter, companyIDParameter, nAMEParameter, iDParameter, addressParameter, activeParameter, codeParameter, maxObligoParameter, isOneTimeObligoParameter, renewDayParameter, obligoStartDateParameter, isVIPParameter);
        }
    
        public virtual ObjectResult<sp_GetSuppliers_Result> sp_GetSuppliers(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, string nAME, string iD, string address, Nullable<bool> active)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSuppliers_Result>("sp_GetSuppliers", allowedRowsParameter, gUIDParameter, companyIDParameter, nAMEParameter, iDParameter, addressParameter, activeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveCustomer(Nullable<long> gUID, string name, string iD, string address, Nullable<long> companyID, Nullable<bool> active, string code, Nullable<bool> isAddInForm, Nullable<long> maxObligo, Nullable<bool> isOneTimeObligo, Nullable<long> renewDay, Nullable<System.DateTime> obligoStartDate, Nullable<bool> isVIP)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var isAddInFormParameter = isAddInForm.HasValue ?
                new ObjectParameter("IsAddInForm", isAddInForm) :
                new ObjectParameter("IsAddInForm", typeof(bool));
    
            var maxObligoParameter = maxObligo.HasValue ?
                new ObjectParameter("MaxObligo", maxObligo) :
                new ObjectParameter("MaxObligo", typeof(long));
    
            var isOneTimeObligoParameter = isOneTimeObligo.HasValue ?
                new ObjectParameter("IsOneTimeObligo", isOneTimeObligo) :
                new ObjectParameter("IsOneTimeObligo", typeof(bool));
    
            var renewDayParameter = renewDay.HasValue ?
                new ObjectParameter("RenewDay", renewDay) :
                new ObjectParameter("RenewDay", typeof(long));
    
            var obligoStartDateParameter = obligoStartDate.HasValue ?
                new ObjectParameter("ObligoStartDate", obligoStartDate) :
                new ObjectParameter("ObligoStartDate", typeof(System.DateTime));
    
            var isVIPParameter = isVIP.HasValue ?
                new ObjectParameter("IsVIP", isVIP) :
                new ObjectParameter("IsVIP", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveCustomer", gUIDParameter, nameParameter, iDParameter, addressParameter, companyIDParameter, activeParameter, codeParameter, isAddInFormParameter, maxObligoParameter, isOneTimeObligoParameter, renewDayParameter, obligoStartDateParameter, isVIPParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveSupplier(Nullable<long> gUID, string name, string iD, string address, Nullable<long> companyID, Nullable<bool> active)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveSupplier", gUIDParameter, nameParameter, iDParameter, addressParameter, companyIDParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_GetCompaniesForms_Result> sp_GetCompaniesForms(Nullable<long> gUID, Nullable<long> companyID, Nullable<long> formID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompaniesForms_Result>("sp_GetCompaniesForms", gUIDParameter, companyIDParameter, formIDParameter);
        }
    
        public virtual ObjectResult<sp_GetForms_Result> sp_GetForms(Nullable<long> gUID, string link, string nAME)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetForms_Result>("sp_GetForms", gUIDParameter, linkParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveCompanyForm(Nullable<long> gUID, Nullable<long> companyID, Nullable<long> formID, Nullable<long> allowedRows)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(long));
    
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveCompanyForm", gUIDParameter, companyIDParameter, formIDParameter, allowedRowsParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveForm(Nullable<long> gUID, string name, string link, Nullable<bool> active)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveForm", gUIDParameter, nameParameter, linkParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_GetCompaniesTables_Result> sp_GetCompaniesTables(Nullable<long> gUID, Nullable<long> companyID, Nullable<long> tableID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var tableIDParameter = tableID.HasValue ?
                new ObjectParameter("TableID", tableID) :
                new ObjectParameter("TableID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompaniesTables_Result>("sp_GetCompaniesTables", gUIDParameter, companyIDParameter, tableIDParameter);
        }
    
        public virtual ObjectResult<sp_GetVehicles_Result> sp_GetVehicles(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, string licenseNumber, Nullable<bool> active, Nullable<long> customerID, Nullable<long> transportID)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(long));
    
            var transportIDParameter = transportID.HasValue ?
                new ObjectParameter("TransportID", transportID) :
                new ObjectParameter("TransportID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetVehicles_Result>("sp_GetVehicles", allowedRowsParameter, gUIDParameter, companyIDParameter, licenseNumberParameter, activeParameter, customerIDParameter, transportIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveVehicle(Nullable<long> gUID, Nullable<long> companyID, string licenseNumber, Nullable<bool> active, Nullable<decimal> tare, Nullable<long> customerID, Nullable<long> transportID, Nullable<bool> isAddInForm, Nullable<long> weighingModeID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var tareParameter = tare.HasValue ?
                new ObjectParameter("Tare", tare) :
                new ObjectParameter("Tare", typeof(decimal));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(long));
    
            var transportIDParameter = transportID.HasValue ?
                new ObjectParameter("TransportID", transportID) :
                new ObjectParameter("TransportID", typeof(long));
    
            var isAddInFormParameter = isAddInForm.HasValue ?
                new ObjectParameter("IsAddInForm", isAddInForm) :
                new ObjectParameter("IsAddInForm", typeof(bool));
    
            var weighingModeIDParameter = weighingModeID.HasValue ?
                new ObjectParameter("WeighingModeID", weighingModeID) :
                new ObjectParameter("WeighingModeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveVehicle", gUIDParameter, companyIDParameter, licenseNumberParameter, activeParameter, tareParameter, customerIDParameter, transportIDParameter, isAddInFormParameter, weighingModeIDParameter);
        }
    
        public virtual ObjectResult<sp_GetSites_Result> sp_GetSites(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, string nAME, Nullable<bool> active)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSites_Result>("sp_GetSites", allowedRowsParameter, gUIDParameter, companyIDParameter, nAMEParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_GetSuppliersContacts_Result> sp_GetSuppliersContacts(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> supplierID, string firstNAME, string lastNAME, string email, Nullable<bool> active)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            var firstNAMEParameter = firstNAME != null ?
                new ObjectParameter("FirstNAME", firstNAME) :
                new ObjectParameter("FirstNAME", typeof(string));
    
            var lastNAMEParameter = lastNAME != null ?
                new ObjectParameter("LastNAME", lastNAME) :
                new ObjectParameter("LastNAME", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSuppliersContacts_Result>("sp_GetSuppliersContacts", allowedRowsParameter, gUIDParameter, supplierIDParameter, firstNAMEParameter, lastNAMEParameter, emailParameter, activeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveSite(Nullable<long> gUID, string name, Nullable<long> companyID, Nullable<bool> active, Nullable<bool> isAddInForm)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var isAddInFormParameter = isAddInForm.HasValue ?
                new ObjectParameter("IsAddInForm", isAddInForm) :
                new ObjectParameter("IsAddInForm", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveSite", gUIDParameter, nameParameter, companyIDParameter, activeParameter, isAddInFormParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveSuppliersCongtact(Nullable<long> gUID, Nullable<long> supplierID, string firstName, string lastName, string email, string phone, string remarks, Nullable<bool> active)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveSuppliersCongtact", gUIDParameter, supplierIDParameter, firstNameParameter, lastNameParameter, emailParameter, phoneParameter, remarksParameter, activeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveSuppliersContact(Nullable<long> gUID, Nullable<long> supplierID, string firstName, string lastName, string email, string phone, string remarks, Nullable<bool> active)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveSuppliersContact", gUIDParameter, supplierIDParameter, firstNameParameter, lastNameParameter, emailParameter, phoneParameter, remarksParameter, activeParameter);
        }
    
        public virtual ObjectResult<string> sp_GetWeight(Nullable<long> gUID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetWeight", gUIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCustomersContacts_Result> sp_GetCustomersContacts(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> customerID, string firstNAME, string lastNAME, string email, Nullable<bool> active, Nullable<bool> isSendWeightsByMail)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(long));
    
            var firstNAMEParameter = firstNAME != null ?
                new ObjectParameter("FirstNAME", firstNAME) :
                new ObjectParameter("FirstNAME", typeof(string));
    
            var lastNAMEParameter = lastNAME != null ?
                new ObjectParameter("LastNAME", lastNAME) :
                new ObjectParameter("LastNAME", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var isSendWeightsByMailParameter = isSendWeightsByMail.HasValue ?
                new ObjectParameter("IsSendWeightsByMail", isSendWeightsByMail) :
                new ObjectParameter("IsSendWeightsByMail", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCustomersContacts_Result>("sp_GetCustomersContacts", allowedRowsParameter, gUIDParameter, customerIDParameter, firstNAMEParameter, lastNAMEParameter, emailParameter, activeParameter, isSendWeightsByMailParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveCustomersContact(Nullable<long> gUID, Nullable<long> customerID, string firstName, string lastName, string email, string phone, string remarks, Nullable<bool> active, Nullable<bool> isSendWeightsByMail, Nullable<long> sendingMethodID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var isSendWeightsByMailParameter = isSendWeightsByMail.HasValue ?
                new ObjectParameter("IsSendWeightsByMail", isSendWeightsByMail) :
                new ObjectParameter("IsSendWeightsByMail", typeof(bool));
    
            var sendingMethodIDParameter = sendingMethodID.HasValue ?
                new ObjectParameter("SendingMethodID", sendingMethodID) :
                new ObjectParameter("SendingMethodID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveCustomersContact", gUIDParameter, customerIDParameter, firstNameParameter, lastNameParameter, emailParameter, phoneParameter, remarksParameter, activeParameter, isSendWeightsByMailParameter, sendingMethodIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_GetUserScale(Nullable<long> gUID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_GetUserScale", gUIDParameter);
        }
    
        public virtual ObjectResult<sp_RunBackup_Result> sp_RunBackup(string path, Nullable<long> companyID)
        {
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RunBackup_Result>("sp_RunBackup", pathParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetSilos_Result> sp_GetSilos(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, string nAME, string sITENAME, Nullable<bool> active)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var sITENAMEParameter = sITENAME != null ?
                new ObjectParameter("SITENAME", sITENAME) :
                new ObjectParameter("SITENAME", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSilos_Result>("sp_GetSilos", allowedRowsParameter, gUIDParameter, companyIDParameter, nAMEParameter, sITENAMEParameter, activeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveSilo(Nullable<long> gUID, Nullable<long> companyID, Nullable<long> scaleID, string name, string siteName, Nullable<decimal> maxCapacity, Nullable<bool> active, Nullable<bool> isLoad, Nullable<bool> isUnload, Nullable<double> loadInterval, Nullable<double> unloadInterval, Nullable<long> loadIntervalTime, Nullable<long> unloadIntervalTime, Nullable<bool> isLogWeight, Nullable<long> logWeightTime)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var scaleIDParameter = scaleID.HasValue ?
                new ObjectParameter("ScaleID", scaleID) :
                new ObjectParameter("ScaleID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var maxCapacityParameter = maxCapacity.HasValue ?
                new ObjectParameter("MaxCapacity", maxCapacity) :
                new ObjectParameter("MaxCapacity", typeof(decimal));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var isLoadParameter = isLoad.HasValue ?
                new ObjectParameter("IsLoad", isLoad) :
                new ObjectParameter("IsLoad", typeof(bool));
    
            var isUnloadParameter = isUnload.HasValue ?
                new ObjectParameter("IsUnload", isUnload) :
                new ObjectParameter("IsUnload", typeof(bool));
    
            var loadIntervalParameter = loadInterval.HasValue ?
                new ObjectParameter("LoadInterval", loadInterval) :
                new ObjectParameter("LoadInterval", typeof(double));
    
            var unloadIntervalParameter = unloadInterval.HasValue ?
                new ObjectParameter("UnloadInterval", unloadInterval) :
                new ObjectParameter("UnloadInterval", typeof(double));
    
            var loadIntervalTimeParameter = loadIntervalTime.HasValue ?
                new ObjectParameter("LoadIntervalTime", loadIntervalTime) :
                new ObjectParameter("LoadIntervalTime", typeof(long));
    
            var unloadIntervalTimeParameter = unloadIntervalTime.HasValue ?
                new ObjectParameter("UnloadIntervalTime", unloadIntervalTime) :
                new ObjectParameter("UnloadIntervalTime", typeof(long));
    
            var isLogWeightParameter = isLogWeight.HasValue ?
                new ObjectParameter("IsLogWeight", isLogWeight) :
                new ObjectParameter("IsLogWeight", typeof(bool));
    
            var logWeightTimeParameter = logWeightTime.HasValue ?
                new ObjectParameter("LogWeightTime", logWeightTime) :
                new ObjectParameter("LogWeightTime", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveSilo", gUIDParameter, companyIDParameter, scaleIDParameter, nameParameter, siteNameParameter, maxCapacityParameter, activeParameter, isLoadParameter, isUnloadParameter, loadIntervalParameter, unloadIntervalParameter, loadIntervalTimeParameter, unloadIntervalTimeParameter, isLogWeightParameter, logWeightTimeParameter);
        }
    
        public virtual ObjectResult<sp_GetTransports_Result> sp_GetTransports(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, string nAME, string iD, string address, Nullable<bool> active)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTransports_Result>("sp_GetTransports", allowedRowsParameter, gUIDParameter, companyIDParameter, nAMEParameter, iDParameter, addressParameter, activeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveTransport(Nullable<long> gUID, string name, string iD, string address, Nullable<long> companyID, Nullable<bool> active, Nullable<bool> isAddInForm)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var isAddInFormParameter = isAddInForm.HasValue ?
                new ObjectParameter("IsAddInForm", isAddInForm) :
                new ObjectParameter("IsAddInForm", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveTransport", gUIDParameter, nameParameter, iDParameter, addressParameter, companyIDParameter, activeParameter, isAddInFormParameter);
        }
    
        public virtual ObjectResult<sp_GetGoodsWeighing_Result> sp_GetGoodsWeighing(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, Nullable<long> supplierID, string certificate)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            var certificateParameter = certificate != null ?
                new ObjectParameter("Certificate", certificate) :
                new ObjectParameter("Certificate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGoodsWeighing_Result>("sp_GetGoodsWeighing", allowedRowsParameter, gUIDParameter, companyIDParameter, supplierIDParameter, certificateParameter);
        }
    
        public virtual ObjectResult<sp_GetGoodsWeighingLines_Result> sp_GetGoodsWeighingLines(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> goodsWeighingID, Nullable<long> itemID, Nullable<long> scaleID)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var goodsWeighingIDParameter = goodsWeighingID.HasValue ?
                new ObjectParameter("GoodsWeighingID", goodsWeighingID) :
                new ObjectParameter("GoodsWeighingID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var scaleIDParameter = scaleID.HasValue ?
                new ObjectParameter("ScaleID", scaleID) :
                new ObjectParameter("ScaleID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGoodsWeighingLines_Result>("sp_GetGoodsWeighingLines", allowedRowsParameter, gUIDParameter, goodsWeighingIDParameter, itemIDParameter, scaleIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveGoodsWeighing(Nullable<long> gUID, Nullable<long> companyID, string certificate, Nullable<long> supplierID, Nullable<double> amount, Nullable<int> count, Nullable<System.DateTime> date)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var certificateParameter = certificate != null ?
                new ObjectParameter("Certificate", certificate) :
                new ObjectParameter("Certificate", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveGoodsWeighing", gUIDParameter, companyIDParameter, certificateParameter, supplierIDParameter, amountParameter, countParameter, dateParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveGoodsWeighingLine(Nullable<long> gUID, Nullable<long> goodsWeighingID, Nullable<long> scaleID, Nullable<double> weight, Nullable<long> itemID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var goodsWeighingIDParameter = goodsWeighingID.HasValue ?
                new ObjectParameter("GoodsWeighingID", goodsWeighingID) :
                new ObjectParameter("GoodsWeighingID", typeof(long));
    
            var scaleIDParameter = scaleID.HasValue ?
                new ObjectParameter("ScaleID", scaleID) :
                new ObjectParameter("ScaleID", typeof(long));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(double));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveGoodsWeighingLine", gUIDParameter, goodsWeighingIDParameter, scaleIDParameter, weightParameter, itemIDParameter);
        }
    
        public virtual ObjectResult<sp_GetUnits_Result> sp_GetUnits(Nullable<long> gUID, string nAME)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUnits_Result>("sp_GetUnits", gUIDParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<sp_GetCompaniesFormsFields_Result> sp_GetCompaniesFormsFields(Nullable<long> gUID, Nullable<long> companyID, Nullable<long> formsFieldID, Nullable<long> formID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var formsFieldIDParameter = formsFieldID.HasValue ?
                new ObjectParameter("FormsFieldID", formsFieldID) :
                new ObjectParameter("FormsFieldID", typeof(long));
    
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompaniesFormsFields_Result>("sp_GetCompaniesFormsFields", gUIDParameter, companyIDParameter, formsFieldIDParameter, formIDParameter);
        }
    
        public virtual ObjectResult<sp_GetFormsFields_Result> sp_GetFormsFields(Nullable<long> gUID, Nullable<long> formID, string nAME)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFormsFields_Result>("sp_GetFormsFields", gUIDParameter, formIDParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveCompaniesFormsField(Nullable<long> gUID, Nullable<long> companyID, Nullable<long> formsFieldID, Nullable<long> formID, Nullable<bool> validationRequired, Nullable<bool> isShowing)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var formsFieldIDParameter = formsFieldID.HasValue ?
                new ObjectParameter("FormsFieldID", formsFieldID) :
                new ObjectParameter("FormsFieldID", typeof(long));
    
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(long));
    
            var validationRequiredParameter = validationRequired.HasValue ?
                new ObjectParameter("ValidationRequired", validationRequired) :
                new ObjectParameter("ValidationRequired", typeof(bool));
    
            var isShowingParameter = isShowing.HasValue ?
                new ObjectParameter("IsShowing", isShowing) :
                new ObjectParameter("IsShowing", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveCompaniesFormsField", gUIDParameter, companyIDParameter, formsFieldIDParameter, formIDParameter, validationRequiredParameter, isShowingParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveFormsField(Nullable<long> gUID, string name, Nullable<long> formID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveFormsField", gUIDParameter, nameParameter, formIDParameter);
        }
    
        public virtual ObjectResult<sp_GetFormsInnerPermissions_Result> sp_GetFormsInnerPermissions(Nullable<long> gUID, Nullable<long> formID, string nAME)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFormsInnerPermissions_Result>("sp_GetFormsInnerPermissions", gUIDParameter, formIDParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<sp_GetPermissions_Result> sp_GetPermissions(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, string nAME)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPermissions_Result>("sp_GetPermissions", allowedRowsParameter, gUIDParameter, companyIDParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<sp_GetPermissionsFormsInnerPermissions_Result> sp_GetPermissionsFormsInnerPermissions(Nullable<long> gUID, Nullable<long> formsInnerPermissionID, Nullable<long> permissionID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var formsInnerPermissionIDParameter = formsInnerPermissionID.HasValue ?
                new ObjectParameter("FormsInnerPermissionID", formsInnerPermissionID) :
                new ObjectParameter("FormsInnerPermissionID", typeof(long));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPermissionsFormsInnerPermissions_Result>("sp_GetPermissionsFormsInnerPermissions", gUIDParameter, formsInnerPermissionIDParameter, permissionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetPermissionsTablesInnerPermissions_Result> sp_GetPermissionsTablesInnerPermissions(Nullable<long> gUID, Nullable<long> tablesInnerPermissionID, Nullable<long> permissionID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var tablesInnerPermissionIDParameter = tablesInnerPermissionID.HasValue ?
                new ObjectParameter("TablesInnerPermissionID", tablesInnerPermissionID) :
                new ObjectParameter("TablesInnerPermissionID", typeof(long));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPermissionsTablesInnerPermissions_Result>("sp_GetPermissionsTablesInnerPermissions", gUIDParameter, tablesInnerPermissionIDParameter, permissionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetTablesInnerPermissions_Result> sp_GetTablesInnerPermissions(Nullable<long> gUID, Nullable<long> tableID, string nAME)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var tableIDParameter = tableID.HasValue ?
                new ObjectParameter("TableID", tableID) :
                new ObjectParameter("TableID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTablesInnerPermissions_Result>("sp_GetTablesInnerPermissions", gUIDParameter, tableIDParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SavePermission(Nullable<long> gUID, string name, Nullable<bool> active, Nullable<long> companyID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SavePermission", gUIDParameter, nameParameter, activeParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SavePermissionsFormsInnerPermission(Nullable<long> gUID, Nullable<long> permissionID, Nullable<long> formsInnerPermissionID, Nullable<bool> read, Nullable<bool> write)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            var formsInnerPermissionIDParameter = formsInnerPermissionID.HasValue ?
                new ObjectParameter("FormsInnerPermissionID", formsInnerPermissionID) :
                new ObjectParameter("FormsInnerPermissionID", typeof(long));
    
            var readParameter = read.HasValue ?
                new ObjectParameter("Read", read) :
                new ObjectParameter("Read", typeof(bool));
    
            var writeParameter = write.HasValue ?
                new ObjectParameter("Write", write) :
                new ObjectParameter("Write", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SavePermissionsFormsInnerPermission", gUIDParameter, permissionIDParameter, formsInnerPermissionIDParameter, readParameter, writeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SavePermissionsTablesInnerPermission(Nullable<long> gUID, Nullable<long> permissionID, Nullable<long> tablesInnerPermissionID, Nullable<bool> read, Nullable<bool> write)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            var tablesInnerPermissionIDParameter = tablesInnerPermissionID.HasValue ?
                new ObjectParameter("TablesInnerPermissionID", tablesInnerPermissionID) :
                new ObjectParameter("TablesInnerPermissionID", typeof(long));
    
            var readParameter = read.HasValue ?
                new ObjectParameter("Read", read) :
                new ObjectParameter("Read", typeof(bool));
    
            var writeParameter = write.HasValue ?
                new ObjectParameter("Write", write) :
                new ObjectParameter("Write", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SavePermissionsTablesInnerPermission", gUIDParameter, permissionIDParameter, tablesInnerPermissionIDParameter, readParameter, writeParameter);
        }
    
        public virtual ObjectResult<sp_GetSilosLog_Result> sp_GetSilosLog(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, Nullable<long> siloID)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var siloIDParameter = siloID.HasValue ?
                new ObjectParameter("SiloID", siloID) :
                new ObjectParameter("SiloID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSilosLog_Result>("sp_GetSilosLog", allowedRowsParameter, gUIDParameter, companyIDParameter, siloIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveSiloLog(Nullable<long> gUID, Nullable<long> siloID, Nullable<System.DateTime> logDate, string logPath, Nullable<long> companyID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var siloIDParameter = siloID.HasValue ?
                new ObjectParameter("SiloID", siloID) :
                new ObjectParameter("SiloID", typeof(long));
    
            var logDateParameter = logDate.HasValue ?
                new ObjectParameter("LogDate", logDate) :
                new ObjectParameter("LogDate", typeof(System.DateTime));
    
            var logPathParameter = logPath != null ?
                new ObjectParameter("LogPath", logPath) :
                new ObjectParameter("LogPath", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveSiloLog", gUIDParameter, siloIDParameter, logDateParameter, logPathParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCompaniesSettings_Result> sp_GetCompaniesSettings(Nullable<long> gUID, Nullable<long> companyID, Nullable<long> settingID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var settingIDParameter = settingID.HasValue ?
                new ObjectParameter("SettingID", settingID) :
                new ObjectParameter("SettingID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompaniesSettings_Result>("sp_GetCompaniesSettings", gUIDParameter, companyIDParameter, settingIDParameter);
        }
    
        public virtual ObjectResult<sp_GetSettings_Result> sp_GetSettings(Nullable<long> gUID, string link, string nAME)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSettings_Result>("sp_GetSettings", gUIDParameter, linkParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveCompanySetting(Nullable<long> gUID, Nullable<long> companyID, Nullable<long> settingID, Nullable<long> allowedRows)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var settingIDParameter = settingID.HasValue ?
                new ObjectParameter("SettingID", settingID) :
                new ObjectParameter("SettingID", typeof(long));
    
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveCompanySetting", gUIDParameter, companyIDParameter, settingIDParameter, allowedRowsParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveSetting(Nullable<long> gUID, string name, string link, Nullable<bool> active)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveSetting", gUIDParameter, nameParameter, linkParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_GetPermissionsSettingsInnerPermissions_Result> sp_GetPermissionsSettingsInnerPermissions(Nullable<long> gUID, Nullable<long> settingsInnerPermissionID, Nullable<long> permissionID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var settingsInnerPermissionIDParameter = settingsInnerPermissionID.HasValue ?
                new ObjectParameter("SettingsInnerPermissionID", settingsInnerPermissionID) :
                new ObjectParameter("SettingsInnerPermissionID", typeof(long));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPermissionsSettingsInnerPermissions_Result>("sp_GetPermissionsSettingsInnerPermissions", gUIDParameter, settingsInnerPermissionIDParameter, permissionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetSettingsInnerPermissions_Result> sp_GetSettingsInnerPermissions(Nullable<long> gUID, Nullable<long> settingID, string nAME)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var settingIDParameter = settingID.HasValue ?
                new ObjectParameter("SettingID", settingID) :
                new ObjectParameter("SettingID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSettingsInnerPermissions_Result>("sp_GetSettingsInnerPermissions", gUIDParameter, settingIDParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SavePermissionsSettingsInnerPermission(Nullable<long> gUID, Nullable<long> permissionID, Nullable<long> settingsInnerPermissionID, Nullable<bool> read, Nullable<bool> write)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            var settingsInnerPermissionIDParameter = settingsInnerPermissionID.HasValue ?
                new ObjectParameter("SettingsInnerPermissionID", settingsInnerPermissionID) :
                new ObjectParameter("SettingsInnerPermissionID", typeof(long));
    
            var readParameter = read.HasValue ?
                new ObjectParameter("Read", read) :
                new ObjectParameter("Read", typeof(bool));
    
            var writeParameter = write.HasValue ?
                new ObjectParameter("Write", write) :
                new ObjectParameter("Write", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SavePermissionsSettingsInnerPermission", gUIDParameter, permissionIDParameter, settingsInnerPermissionIDParameter, readParameter, writeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveCompaniesSystemSetting(Nullable<long> gUID, Nullable<int> languageID, string logoPath, string dataFolder, string imagesFolder, string systemLogoPath, Nullable<long> companyID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            var logoPathParameter = logoPath != null ?
                new ObjectParameter("LogoPath", logoPath) :
                new ObjectParameter("LogoPath", typeof(string));
    
            var dataFolderParameter = dataFolder != null ?
                new ObjectParameter("DataFolder", dataFolder) :
                new ObjectParameter("DataFolder", typeof(string));
    
            var imagesFolderParameter = imagesFolder != null ?
                new ObjectParameter("ImagesFolder", imagesFolder) :
                new ObjectParameter("ImagesFolder", typeof(string));
    
            var systemLogoPathParameter = systemLogoPath != null ?
                new ObjectParameter("SystemLogoPath", systemLogoPath) :
                new ObjectParameter("SystemLogoPath", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveCompaniesSystemSetting", gUIDParameter, languageIDParameter, logoPathParameter, dataFolderParameter, imagesFolderParameter, systemLogoPathParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveSystemSetting(Nullable<long> gUID, Nullable<int> languageID, string logoPath)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            var logoPathParameter = logoPath != null ?
                new ObjectParameter("LogoPath", logoPath) :
                new ObjectParameter("LogoPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveSystemSetting", gUIDParameter, languageIDParameter, logoPathParameter);
        }
    
        public virtual ObjectResult<sp_GetDrivers_Result> sp_GetDrivers(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, string nAME, string iD, Nullable<bool> active, string code)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDrivers_Result>("sp_GetDrivers", allowedRowsParameter, gUIDParameter, companyIDParameter, nAMEParameter, iDParameter, activeParameter, codeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveDriver(Nullable<long> gUID, string name, string iD, Nullable<long> companyID, Nullable<bool> active, string code, Nullable<bool> isAddInForm)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var isAddInFormParameter = isAddInForm.HasValue ?
                new ObjectParameter("IsAddInForm", isAddInForm) :
                new ObjectParameter("IsAddInForm", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveDriver", gUIDParameter, nameParameter, iDParameter, companyIDParameter, activeParameter, codeParameter, isAddInFormParameter);
        }
    
        public virtual ObjectResult<sp_GetConnections_Result> sp_GetConnections(Nullable<long> allowedRows, Nullable<long> gUID, string tag, Nullable<long> companyID, Nullable<long> vehicleID, Nullable<long> transportID, Nullable<long> itemID, Nullable<long> inSiteID, Nullable<long> outSiteID, Nullable<long> customerID, Nullable<long> driverID)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(long));
    
            var transportIDParameter = transportID.HasValue ?
                new ObjectParameter("TransportID", transportID) :
                new ObjectParameter("TransportID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var inSiteIDParameter = inSiteID.HasValue ?
                new ObjectParameter("InSiteID", inSiteID) :
                new ObjectParameter("InSiteID", typeof(long));
    
            var outSiteIDParameter = outSiteID.HasValue ?
                new ObjectParameter("OutSiteID", outSiteID) :
                new ObjectParameter("OutSiteID", typeof(long));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(long));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetConnections_Result>("sp_GetConnections", allowedRowsParameter, gUIDParameter, tagParameter, companyIDParameter, vehicleIDParameter, transportIDParameter, itemIDParameter, inSiteIDParameter, outSiteIDParameter, customerIDParameter, driverIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveConnection(Nullable<long> gUID, string tag, Nullable<long> companyID, Nullable<long> vehicleID, Nullable<long> itemID, Nullable<long> transportID, Nullable<long> driverID, Nullable<long> inSiteID, Nullable<long> outSiteID, Nullable<long> customerID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var transportIDParameter = transportID.HasValue ?
                new ObjectParameter("TransportID", transportID) :
                new ObjectParameter("TransportID", typeof(long));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(long));
    
            var inSiteIDParameter = inSiteID.HasValue ?
                new ObjectParameter("InSiteID", inSiteID) :
                new ObjectParameter("InSiteID", typeof(long));
    
            var outSiteIDParameter = outSiteID.HasValue ?
                new ObjectParameter("OutSiteID", outSiteID) :
                new ObjectParameter("OutSiteID", typeof(long));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveConnection", gUIDParameter, tagParameter, companyIDParameter, vehicleIDParameter, itemIDParameter, transportIDParameter, driverIDParameter, inSiteIDParameter, outSiteIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<sp_GetInnerPermissions_Result> sp_GetInnerPermissions(Nullable<long> gUID, string nAME)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInnerPermissions_Result>("sp_GetInnerPermissions", gUIDParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<sp_GetPermissionsInnerPermissions_Result> sp_GetPermissionsInnerPermissions(Nullable<long> gUID, Nullable<long> innerPermissionID, Nullable<long> permissionID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var innerPermissionIDParameter = innerPermissionID.HasValue ?
                new ObjectParameter("InnerPermissionID", innerPermissionID) :
                new ObjectParameter("InnerPermissionID", typeof(long));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPermissionsInnerPermissions_Result>("sp_GetPermissionsInnerPermissions", gUIDParameter, innerPermissionIDParameter, permissionIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SavePermissionsInnerPermission(Nullable<long> gUID, Nullable<long> permissionID, Nullable<long> innerPermissionID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            var innerPermissionIDParameter = innerPermissionID.HasValue ?
                new ObjectParameter("InnerPermissionID", innerPermissionID) :
                new ObjectParameter("InnerPermissionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SavePermissionsInnerPermission", gUIDParameter, permissionIDParameter, innerPermissionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetWeighingModes_Result> sp_GetWeighingModes(Nullable<long> gUID, string nAME)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWeighingModes_Result>("sp_GetWeighingModes", gUIDParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<sp_GetSendingMethods_Result> sp_GetSendingMethods(Nullable<long> gUID, string nAME)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSendingMethods_Result>("sp_GetSendingMethods", gUIDParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<sp_GetCompaniesSystemSettings_Result> sp_GetCompaniesSystemSettings(Nullable<long> allowedRows, Nullable<long> gUID)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompaniesSystemSettings_Result>("sp_GetCompaniesSystemSettings", allowedRowsParameter, gUIDParameter);
        }
    
        public virtual ObjectResult<sp_GetVehiclesWeighing_Result> sp_GetVehiclesWeighing(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, Nullable<long> certificateID, Nullable<long> userID, Nullable<long> vehicleID, Nullable<long> scaleID, Nullable<long> transportID, Nullable<long> itemID, Nullable<long> inSiteID, Nullable<long> outSiteID, Nullable<long> customerID, Nullable<int> weighingMode, Nullable<bool> isCancelled, Nullable<long> driverID, Nullable<bool> isManual)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var certificateIDParameter = certificateID.HasValue ?
                new ObjectParameter("CertificateID", certificateID) :
                new ObjectParameter("CertificateID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(long));
    
            var scaleIDParameter = scaleID.HasValue ?
                new ObjectParameter("ScaleID", scaleID) :
                new ObjectParameter("ScaleID", typeof(long));
    
            var transportIDParameter = transportID.HasValue ?
                new ObjectParameter("TransportID", transportID) :
                new ObjectParameter("TransportID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var inSiteIDParameter = inSiteID.HasValue ?
                new ObjectParameter("InSiteID", inSiteID) :
                new ObjectParameter("InSiteID", typeof(long));
    
            var outSiteIDParameter = outSiteID.HasValue ?
                new ObjectParameter("OutSiteID", outSiteID) :
                new ObjectParameter("OutSiteID", typeof(long));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(long));
    
            var weighingModeParameter = weighingMode.HasValue ?
                new ObjectParameter("WeighingMode", weighingMode) :
                new ObjectParameter("WeighingMode", typeof(int));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(long));
    
            var isManualParameter = isManual.HasValue ?
                new ObjectParameter("IsManual", isManual) :
                new ObjectParameter("IsManual", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetVehiclesWeighing_Result>("sp_GetVehiclesWeighing", allowedRowsParameter, gUIDParameter, companyIDParameter, certificateIDParameter, userIDParameter, vehicleIDParameter, scaleIDParameter, transportIDParameter, itemIDParameter, inSiteIDParameter, outSiteIDParameter, customerIDParameter, weighingModeParameter, isCancelledParameter, driverIDParameter, isManualParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_SaveVehicleWeighing(Nullable<long> gUID, Nullable<long> companyID, Nullable<long> scaleID, Nullable<long> vehicleID, Nullable<long> itemID, Nullable<long> transportID, Nullable<decimal> inWeight, Nullable<decimal> outWeight, Nullable<decimal> netto, Nullable<System.DateTime> inDate, Nullable<System.DateTime> outDate, Nullable<bool> isCancelled, Nullable<long> inSiteID, Nullable<long> outSiteID, string remarks, Nullable<bool> isManual, Nullable<long> certificateID, Nullable<long> userID, Nullable<long> customerID, Nullable<int> weighingMode, Nullable<long> driverID, string tag, string reference)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var scaleIDParameter = scaleID.HasValue ?
                new ObjectParameter("ScaleID", scaleID) :
                new ObjectParameter("ScaleID", typeof(long));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var transportIDParameter = transportID.HasValue ?
                new ObjectParameter("TransportID", transportID) :
                new ObjectParameter("TransportID", typeof(long));
    
            var inWeightParameter = inWeight.HasValue ?
                new ObjectParameter("InWeight", inWeight) :
                new ObjectParameter("InWeight", typeof(decimal));
    
            var outWeightParameter = outWeight.HasValue ?
                new ObjectParameter("OutWeight", outWeight) :
                new ObjectParameter("OutWeight", typeof(decimal));
    
            var nettoParameter = netto.HasValue ?
                new ObjectParameter("Netto", netto) :
                new ObjectParameter("Netto", typeof(decimal));
    
            var inDateParameter = inDate.HasValue ?
                new ObjectParameter("InDate", inDate) :
                new ObjectParameter("InDate", typeof(System.DateTime));
    
            var outDateParameter = outDate.HasValue ?
                new ObjectParameter("OutDate", outDate) :
                new ObjectParameter("OutDate", typeof(System.DateTime));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var inSiteIDParameter = inSiteID.HasValue ?
                new ObjectParameter("InSiteID", inSiteID) :
                new ObjectParameter("InSiteID", typeof(long));
    
            var outSiteIDParameter = outSiteID.HasValue ?
                new ObjectParameter("OutSiteID", outSiteID) :
                new ObjectParameter("OutSiteID", typeof(long));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isManualParameter = isManual.HasValue ?
                new ObjectParameter("IsManual", isManual) :
                new ObjectParameter("IsManual", typeof(bool));
    
            var certificateIDParameter = certificateID.HasValue ?
                new ObjectParameter("CertificateID", certificateID) :
                new ObjectParameter("CertificateID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(long));
    
            var weighingModeParameter = weighingMode.HasValue ?
                new ObjectParameter("WeighingMode", weighingMode) :
                new ObjectParameter("WeighingMode", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(long));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_SaveVehicleWeighing", gUIDParameter, companyIDParameter, scaleIDParameter, vehicleIDParameter, itemIDParameter, transportIDParameter, inWeightParameter, outWeightParameter, nettoParameter, inDateParameter, outDateParameter, isCancelledParameter, inSiteIDParameter, outSiteIDParameter, remarksParameter, isManualParameter, certificateIDParameter, userIDParameter, customerIDParameter, weighingModeParameter, driverIDParameter, tagParameter, referenceParameter);
        }
    }
}
