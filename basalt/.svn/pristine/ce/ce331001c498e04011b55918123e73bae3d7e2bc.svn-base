//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Basalt_v2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WanagerDBEntities : DbContext
    {
        public WanagerDBEntities()
            : base("name=WanagerDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<sp_GetCompanies_Result> sp_GetCompanies(Nullable<long> allowedRows, Nullable<long> gUID, string nAME, Nullable<long> ownerID, string iD, string address, Nullable<bool> isOwner, Nullable<bool> active)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(long));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var isOwnerParameter = isOwner.HasValue ?
                new ObjectParameter("IsOwner", isOwner) :
                new ObjectParameter("IsOwner", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompanies_Result>("sp_GetCompanies", allowedRowsParameter, gUIDParameter, nAMEParameter, ownerIDParameter, iDParameter, addressParameter, isOwnerParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_GetScales_Result> sp_GetScales(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, Nullable<long> ownerID, string nAME, string mAC, Nullable<long> scalesTypeID, Nullable<bool> status, Nullable<bool> active)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(long));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var mACParameter = mAC != null ?
                new ObjectParameter("MAC", mAC) :
                new ObjectParameter("MAC", typeof(string));
    
            var scalesTypeIDParameter = scalesTypeID.HasValue ?
                new ObjectParameter("ScalesTypeID", scalesTypeID) :
                new ObjectParameter("ScalesTypeID", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetScales_Result>("sp_GetScales", allowedRowsParameter, gUIDParameter, companyIDParameter, ownerIDParameter, nAMEParameter, mACParameter, scalesTypeIDParameter, statusParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_GetUsers_Result> sp_GetUsers(Nullable<long> allowedRows, Nullable<long> gUID, Nullable<long> companyID, Nullable<long> defaultFormID, Nullable<long> defaultScaleID, string firstName, string lastName, string username, string password, string iD, string email, Nullable<bool> active)
        {
            var allowedRowsParameter = allowedRows.HasValue ?
                new ObjectParameter("AllowedRows", allowedRows) :
                new ObjectParameter("AllowedRows", typeof(long));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var defaultFormIDParameter = defaultFormID.HasValue ?
                new ObjectParameter("DefaultFormID", defaultFormID) :
                new ObjectParameter("DefaultFormID", typeof(long));
    
            var defaultScaleIDParameter = defaultScaleID.HasValue ?
                new ObjectParameter("DefaultScaleID", defaultScaleID) :
                new ObjectParameter("DefaultScaleID", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUsers_Result>("sp_GetUsers", allowedRowsParameter, gUIDParameter, companyIDParameter, defaultFormIDParameter, defaultScaleIDParameter, firstNameParameter, lastNameParameter, usernameParameter, passwordParameter, iDParameter, emailParameter, activeParameter);
        }
    }
}
